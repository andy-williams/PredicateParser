//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Predicate.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class PredicateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		And=1, Or=2, GreaterThan=3, GreaterThanEqual=4, LessThan=5, LessThanEqual=6, 
		Equal=7, NotEqual=8, Contains=9, OpenParen=10, CloseParen=11, Number=12, 
		String=13, Property=14, WhiteSpace=15, Discardable=16;
	public const int
		RULE_expr = 0, RULE_predicate = 1, RULE_booleanOperator = 2, RULE_operator = 3, 
		RULE_operand = 4;
	public static readonly string[] ruleNames = {
		"expr", "predicate", "booleanOperator", "operator", "operand"
	};

	private static readonly string[] _LiteralNames = {
		null, "'and'", "'or'", "'>'", "'>='", "'<'", "'<='", "'='", "'!='", "'contains'", 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "And", "Or", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Contains", "OpenParen", "CloseParen", "Number", 
		"String", "Property", "WhiteSpace", "Discardable"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Predicate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PredicateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PredicateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PredicateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(PredicateParser.Eof, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicateVisitor<TResult> typedVisitor = visitor as IPredicateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 0, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; predicate(0);
			State = 11; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode OpenParen() { return GetToken(PredicateParser.OpenParen, 0); }
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode CloseParen() { return GetToken(PredicateParser.CloseParen, 0); }
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public BooleanOperatorContext booleanOperator() {
			return GetRuleContext<BooleanOperatorContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicateVisitor<TResult> typedVisitor = visitor as IPredicateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_predicate, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenParen:
				{
				State = 14; Match(OpenParen);
				State = 15; predicate(0);
				State = 16; Match(CloseParen);
				}
				break;
			case Number:
			case String:
			case Property:
				{
				State = 18; operand();
				State = 19; @operator();
				State = 20; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 30;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PredicateContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_predicate);
					State = 24;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 25; booleanOperator();
					State = 26; predicate(4);
					}
					} 
				}
				State = 32;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanOperatorContext : ParserRuleContext {
		public ITerminalNode And() { return GetToken(PredicateParser.And, 0); }
		public ITerminalNode Or() { return GetToken(PredicateParser.Or, 0); }
		public BooleanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicateVisitor<TResult> typedVisitor = visitor as IPredicateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorContext booleanOperator() {
		BooleanOperatorContext _localctx = new BooleanOperatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_booleanOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode GreaterThan() { return GetToken(PredicateParser.GreaterThan, 0); }
		public ITerminalNode LessThan() { return GetToken(PredicateParser.LessThan, 0); }
		public ITerminalNode GreaterThanEqual() { return GetToken(PredicateParser.GreaterThanEqual, 0); }
		public ITerminalNode LessThanEqual() { return GetToken(PredicateParser.LessThanEqual, 0); }
		public ITerminalNode Equal() { return GetToken(PredicateParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(PredicateParser.NotEqual, 0); }
		public ITerminalNode Contains() { return GetToken(PredicateParser.Contains, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicateVisitor<TResult> typedVisitor = visitor as IPredicateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterThan) | (1L << GreaterThanEqual) | (1L << LessThan) | (1L << LessThanEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Contains))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public ITerminalNode Property() { return GetToken(PredicateParser.Property, 0); }
		public ITerminalNode String() { return GetToken(PredicateParser.String, 0); }
		public ITerminalNode Number() { return GetToken(PredicateParser.Number, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicateVisitor<TResult> typedVisitor = visitor as IPredicateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 8, RULE_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << String) | (1L << Property))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return predicate_sempred((PredicateContext)_localctx, predIndex);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', '*', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x19', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x1F', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\"', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x2', '\x3', '\x4', '\a', '\x2', '\x4', '\x6', '\b', 
		'\n', '\x2', '\x5', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '\x5', '\v', 
		'\x3', '\x2', '\xE', '\x10', '\x2', '&', '\x2', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x18', '\x3', '\x2', '\x2', '\x2', '\x6', '#', '\x3', '\x2', 
		'\x2', '\x2', '\b', '%', '\x3', '\x2', '\x2', '\x2', '\n', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\r', '\x5', '\x4', '\x3', '\x2', '\r', '\xE', 
		'\a', '\x2', '\x2', '\x3', '\xE', '\x3', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\x10', '\b', '\x3', '\x1', '\x2', '\x10', '\x11', '\a', '\f', '\x2', 
		'\x2', '\x11', '\x12', '\x5', '\x4', '\x3', '\x2', '\x12', '\x13', '\a', 
		'\r', '\x2', '\x2', '\x13', '\x19', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x15', '\x5', '\n', '\x6', '\x2', '\x15', '\x16', '\x5', '\b', '\x5', 
		'\x2', '\x16', '\x17', '\x5', '\n', '\x6', '\x2', '\x17', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xF', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x19', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\f', '\x5', '\x2', '\x2', '\x1B', '\x1C', '\x5', 
		'\x6', '\x4', '\x2', '\x1C', '\x1D', '\x5', '\x4', '\x3', '\x6', '\x1D', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\"', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', '$', 
		'\t', '\x2', '\x2', '\x2', '$', '\a', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\t', '\x3', '\x2', '\x2', '&', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\t', '\x4', '\x2', '\x2', '(', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x18', ' ',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
