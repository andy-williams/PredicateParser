//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Predicate.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class PredicateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		And=1, Or=2, GreaterThan=3, GreaterThanEqual=4, LessThan=5, LessThanEqual=6, 
		Equal=7, NotEqual=8, Contains=9, OpenParen=10, CloseParen=11, Number=12, 
		String=13, Property=14, WhiteSpace=15, Discardable=16;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"And", "Or", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Contains", "OpenParen", "CloseParen", "Number", 
		"String", "Property", "WhiteSpace", "Discardable", "PROPERTY_NAME", "AT"
	};


	public PredicateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PredicateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'and'", "'or'", "'>'", "'>='", "'<'", "'<='", "'='", "'!='", "'contains'", 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "And", "Or", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Contains", "OpenParen", "CloseParen", "Number", 
		"String", "Property", "WhiteSpace", "Discardable"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Predicate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PredicateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x12', 'o', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x6', 
		'\r', 'L', '\n', '\r', '\r', '\r', '\xE', '\r', 'M', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 'T', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', 'W', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x6', '\x10', '_', 
		'\n', '\x10', '\r', '\x10', '\xE', '\x10', '`', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x6', '\x12', 'j', '\n', '\x12', '\r', '\x12', '\xE', '\x12', 
		'k', '\x3', '\x13', '\x3', '\x13', '\x3', 'U', '\x2', '\x14', '\x3', '\x3', 
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', 
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', 
		'\x2', '%', '\x2', '\x3', '\x2', '\x6', '\x3', '\x2', '\x32', ';', '\x5', 
		'\x2', '\f', '\f', '\xF', '\xF', '$', '$', '\x5', '\x2', '\v', '\f', '\xE', 
		'\xF', '\"', '\"', '\x4', '\x2', '\x61', '\x61', '\x63', '|', '\x2', 'q', 
		'\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\'', '\x3', '\x2', '\x2', '\x2', '\x5', '+', 
		'\x3', '\x2', '\x2', '\x2', '\a', '.', '\x3', '\x2', '\x2', '\x2', '\t', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\v', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x35', '\x3', '\x2', '\x2', '\x2', '\xF', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x11', ':', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x15', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x17', 'H', '\x3', '\x2', '\x2', '\x2', '\x19', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', 'O', '\x3', '\x2', '\x2', '\x2', '\x1D', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '^', '\x3', '\x2', '\x2', '\x2', '!', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '#', 'i', '\x3', '\x2', '\x2', '\x2', '%', 
		'm', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x63', '\x2', '\x2', 
		'(', ')', '\a', 'p', '\x2', '\x2', ')', '*', '\a', '\x66', '\x2', '\x2', 
		'*', '\x4', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', 'q', '\x2', '\x2', 
		',', '-', '\a', 't', '\x2', '\x2', '-', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\a', '@', '\x2', '\x2', '/', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x31', '\a', '@', '\x2', '\x2', '\x31', '\x32', '\a', '?', '\x2', 
		'\x2', '\x32', '\n', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', 
		'>', '\x2', '\x2', '\x34', '\f', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', '>', '\x2', '\x2', '\x36', '\x37', '\a', '?', '\x2', '\x2', '\x37', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '?', '\x2', '\x2', 
		'\x39', '\x10', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '#', '\x2', 
		'\x2', ';', '<', '\a', '?', '\x2', '\x2', '<', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\a', '\x65', '\x2', '\x2', '>', '?', '\a', 'q', '\x2', 
		'\x2', '?', '@', '\a', 'p', '\x2', '\x2', '@', '\x41', '\a', 'v', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\x63', '\x2', '\x2', '\x42', '\x43', '\a', 
		'k', '\x2', '\x2', '\x43', '\x44', '\a', 'p', '\x2', '\x2', '\x44', '\x45', 
		'\a', 'u', '\x2', '\x2', '\x45', '\x14', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\a', '*', '\x2', '\x2', 'G', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '+', '\x2', '\x2', 'I', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\t', '\x2', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'U', '\a', '$', '\x2', '\x2', 'P', 'Q', '\a', '^', '\x2', 
		'\x2', 'Q', 'T', '\a', '$', '\x2', '\x2', 'R', 'T', '\n', '\x3', '\x2', 
		'\x2', 'S', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '$', '\x2', 
		'\x2', 'Y', '\x1C', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x5', '%', 
		'\x13', '\x2', '[', '\\', '\x5', '#', '\x12', '\x2', '\\', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', ']', '_', '\t', '\x4', '\x2', '\x2', '^', ']', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\b', '\x10', '\x2', 
		'\x2', '\x63', ' ', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\v', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\b', '\x11', '\x2', '\x2', 'g', '\"', '\x3', '\x2', '\x2', '\x2', 
		'h', 'j', '\t', '\x5', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', '$', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '\x42', '\x2', '\x2', 'n', '&', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x2', 'M', 'S', 'U', '`', 'k', '\x3', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
